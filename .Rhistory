## Base plot
plotdf = data.frame(alpha = aas.rat, beta = BBs.rat, nll = prof2d.rat) ## 2d profiles
plotdf$line_alphas = opt.pc.abraded.rat.skin$minimum*plotdf$beta/(1-opt.pc.abraded.rat.skin$minimum) ## Add coords for line representing alpha/(alpha+beta) = 0.02
linepts = which(abs(plotdf$alpha/(plotdf$alpha+plotdf$beta) - opt.pc.abraded.rat.skin$minimum) < 5e-5)## extract (alpha, beta) pairs that fall on the line
linepts = linepts[c(1, 15, 34)]
plotdf[linepts, ]
pp = ggplot(subset(plotdf, alpha <=1000))+geom_point(aes(x = alpha, y = beta, color = nll)) +
scale_color_distiller(palette = "Spectral") +
geom_contour(aes(x = alpha, y = beta, z = nll), binwidth = 2, color = 'gray20') +
geom_line(aes(x = line_alphas, y = beta), color = 'white', lwd = 2) +
geom_point(data = plotdf[linepts[1],], aes(x = alpha , y = beta), shape = 7, size = 2)+
geom_point(data = plotdf[linepts[2],], aes(x = alpha , y = beta), shape = 8, size = 2)+
geom_point(data = plotdf[linepts[3],], aes(x = alpha , y = beta), shape = 5, size = 2)+
geom_text(data = plotdf[linepts[1],], aes(x = alpha +90, y = beta, label = round(nll, 4))) +
geom_text(data = plotdf[linepts[2],], aes(x = alpha +90, y = beta, label = round(nll, 4))) +
geom_text(data = plotdf[linepts[3],], aes(x = alpha +90, y = beta, label = round(nll, 4))) +
ggtitle('2D likelihood surface', subtitle = 'mixture model fitted to data from rats, abraded skin')+
xlab(expression(alpha)) +
ylab(expression(beta)) +
theme_bw()
pp
## Plot beta CDF for the three focal points
xx = seq(0, .05, by = 0.0001)
bdlist = data.frame(xx = xx,
pt1 = pbeta(q = xx, shape1 = plotdf[linepts[3],'alpha'], shape2 = plotdf[linepts[3],'beta']),
pt2 = pbeta(q = xx, shape1 = plotdf[linepts[2],'alpha'], shape2 = plotdf[linepts[2],'beta']),
pt3 = pbeta(q = xx, shape1 = plotdf[linepts[1],'alpha'], shape2 = plotdf[linepts[1],'beta']))
bdlist = melt(bdlist, id.var = 'xx')
bdplot = ggplot(data = bdlist)+
geom_point(aes(x = xx, y = value, shape = variable, color = variable), size = 2, alpha = .5)+
geom_line(aes(x = xx, y = value, color = variable), alpha = .7)+
scale_color_discrete(name = "",
breaks=c("pt1", "pt2", "pt3"),
labels=c("upper point", "middle point", "lower point")) +
scale_shape_manual(name = "",
values = c(5,8,7),
breaks=c("pt1", "pt2", "pt3"),
labels=c("upper point", "middle point", "lower point")) +
xlab('pc')+
ylab('cumulative density')+
ggtitle('Fitted Beta(\u03B1,\u03B2) distribution', subtitle = 'selected points in top panel specify (\u03B1, \u03B2) values')+
theme_bw()
bdplot
outplot = arrangeGrob(pp, bdplot, nrow = 2)
ggsave(filename = figS1, plot = outplot, width = 5, height = 7, dpi = 'print', device = png())
## Calculate delta AIC for fits to abraded skin data
##  Mixture model vs basic model in hamsters
##  Not possible to do this comparison in rats, because there was no real MLE in rat mixture model
AICcalc = function(n.pars, nll){
2*n.pars+2*nll
}
AIC.basic.ham = AICcalc(n.pars = 2, nll = opt.pc.abraded.skin$value)
AIC.mixture.ham = AICcalc(n.pars = 3, nll = opt.aa.BB.abraded.skin$value)
del.AIC.hamster = c(AIC.basic.ham, AIC.mixture.ham); del.AIC.hamster = del.AIC.hamster-min(del.AIC.hamster)
del.AIC.hamster
####################################################################
###########################   SECTION 4   ##########################
####
####   4. Plot results!
####
####################################################################
####################################################################
## Plot point estimates and CIs of each free paramter, as well as estimated Beta ditribution of pc values
{
pdf(fig2)
par(mgp = c(2, 1, 0), mar = c(3,7,2,2))
layout(mat = matrix(c(1,1,2,3), byrow = T, nrow = 2, ncol = 2))
ham.col = 'dodgerblue3'
rat.col = 'gold'
## Plot1 - point estimates and CIs ----------
xtext = c(-1.9, -8.5, -7.1, -5.4)
ytext = c(1.001, 1.001, 1.001, 1.001)+.0005
#cols = c('firebrick1', 'deepskyblue', 'limegreen', 'chocolate1')
labs = c(expression('p'[c]*' abraded'),
expression('p'[c]*' intact'),
expression('p'[c]*' shaved'),
expression('p'[c]*' conjunctival'),
expression('p'[p]),
expression('p'[c]*' abraded'),
expression('p'[p]))
ests = c(opt.pc.abraded.skin$minimum, opt.pc.intact.skin$minimum, opt.pc.shaved.skin$minimum, opt.pc.conjunctival.skin$minimum, pP, opt.pc.abraded.rat.skin$minimum, pP.rat)
CI.lows = c(CI.abraded[1], CI.intact[1], CI.shaved[1], CI.conjunctival[1], CI.pP[1], CI.abraded.rat[1], CI.pP.rat[1])
CI.highs = c(CI.abraded[2], CI.intact[2], CI.shaved[2], CI.conjunctival[2], CI.pP[2], CI.abraded.rat[2], CI.pP.rat[2])
yvals = length(ests):1
plot(log10(ests), yvals, pch = c(rep(21, 5), 22,22), bg = c(rep(ham.col, 5), rat.col, rat.col), col = c(rep('black', 5), 'gray', 'gray'), xlab = 'log10(value)', ylab = '', yaxt = 'n', bty = 'n', xlim = c(-10, 0))
segments(x0 = log10(CI.lows), x1 = log10(CI.highs), y0 = yvals, bty = 'n', col = c(rep(ham.col, 5), rat.col, rat.col))
axis(2, at = yvals, labels = labs, las = 2)
legend(-10, 2.5, c('hamsters', 'rats'), pch = c(21,22), yjust = .5, col = c('black', 'gray'), pt.bg = c(ham.col, rat.col), bty = 'n')
abline(h = 2.5, lty = 2)
mtext(3, text = 'A', at = -12, line = 1, font = 2, xpd = NA)
xlims = par('usr')[1:2]
par(mar = c(3, 4,3,2))
xx = seq(0, 1, by = 0.001)
plot((xx), (dbeta(xx, shape1 = opt.aa.BB.abraded.skin$par['aa'], shape2 = opt.aa.BB.abraded.skin$par['bb'])), lty = 1, pch = 21, type = 'b', lwd = .5, ylab = 'density', xlab = expression('p'[c]), bg = ham.col)
text(x = -.3, 36, 'B', font = 2, xpd = NA)
plot((xx), (dbeta(xx, shape1 = opt.aa.BB.abraded.rat.skin$par['aa'], shape2 = opt.aa.BB.abraded.rat.skin$par['bb'])), lty = 1, bg = rat.col, pch = 22, type = 'b', lwd = .5, ylab = 'density', xlab = expression('p'[c]), col = 'gray')
text(x = -.3, 655, 'C', font = 2, xpd = NA)
dev.off()
}
########################## Plot data vs. model fits ############################
##### Fig. 3:
## Reformat observed data for plotting
dat = reformat.route(intact)
intact.CIs = binom.confint(dat[,'died'], dat[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
dat = reformat.route(shaved)
shaved.CIs = binom.confint(dat[,'died'], dat[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
dat = reformat.route(abraded)
abraded.CIs = binom.confint(dat[,'died'], dat[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
dat = reformat.route(conjunctival)
conjunctival.CIs = binom.confint(dat[,'died'], dat[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
IP.CIs = binom.confint(IP[,'died'], IP[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
ratdat = reformat.route(abraded.rat)
rat.CIs = binom.confint(ratdat[,'died'], ratdat[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
IP.CIs.rat = binom.confint(IP.rat[,'died'], IP.rat[,'n'], conf.level = .95, methods = 'wilson')[,c('lower', 'upper')]
#Define a function to plot probability of infection at different D0s, given parameter estimates
p.inf = function(doses, best.pc, best.pp = pP){
1-exp(-doses*best.pc*best.pp)
}
## Repeat for prob infection, given  IP inoculation
p.inf.IP = function(dose, best.pp){
1-exp(-dose*best.pp)
}
## Repeat for prob infection, given mixture model
p.inf.mixture = function(dd.in, pp.in, aa.in, bb.in, sp = 'hamsters'){
sapply(dd.in, function(DD) {p_inf_fun(DD, pp.in, aa.in, bb.in, sp)})
}
# Convert color to color + transparency
col2alpha <- function(col, alpha) {
col_rgb <- col2rgb(col)/255
rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)
}
{
pdf(fig3, height = 5, width = 7)
par(mfrow = c(2,3), mgp = c(2,1,0), mar = c(3,3,3,1))
dd = round(10^seq(0, 9, by = .01))
plot(dd, p.inf(dd, opt.pc.intact.skin$minimum), ylab = 'Probability of Infection', xlab = 'Dose', type = 'l', lwd = 2, ylim = c(0,1), log = 'x', cex.lab = 1.1, xlim = c(1, 1e8))
#Plot CI bars
segments(x0 = intact[,'dose'], y0 = intact.CIs[,1], y1 = intact.CIs[,2])
segments(x0 = intact[,'dose']*.7, y0 = intact.CIs[,1], x1 = intact[,'dose']*1.3)
segments(x0 = intact[,'dose']*.7, y0 = intact.CIs[,2], x1 = intact[,'dose']*1.3)
# data
points(intact[,'dose'], intact[,'died']/intact[,'n'], pch = 21, cex = 1.5, bg = ham.col)
text(.1, 1.15, 'A', font = 2, xpd = NA)
#Shaved
plot(dd, p.inf(dd, opt.pc.shaved.skin$minimum, pP), ylab = 'Probability of Infection', xlab = 'Dose', type = 'l', lwd = 2, ylim = c(0,1), log = 'x', cex.lab = 1.1, xlim = c(1, 1e8))
#Plot CI bars
segments(x0 = shaved[,'dose'], y0 = shaved.CIs[,1], y1 = shaved.CIs[,2])
segments(x0 = shaved[,'dose']*.7, y0 = shaved.CIs[,1], x1 = shaved[,'dose']*1.3)
segments(x0 = shaved[,'dose']*.7, y0 = shaved.CIs[,2], x1 = shaved[,'dose']*1.3)
# data
points(shaved[,'dose'], shaved[,'died']/shaved[,'n'], pch = 21, cex = 1.5, bg = ham.col)
text(.1, 1.15, 'B', font = 2, xpd = NA)
#Abraded
## Basic model fit and data
plot(dd, p.inf(dd, opt.pc.abraded.skin$minimum, pP), ylab = 'Probability of Infection', xlab = 'Dose', type = 'l', lwd = 2, ylim = c(0,1), log = 'x',  cex.lab = 1.1, xlim = c(1, 1e8))
yy.mixture.plot = p.inf.mixture(dd.in = dd, aa.in = opt.aa.BB.abraded.skin$par['aa'], bb.in = opt.aa.BB.abraded.skin$par['bb'], pp.in = pP)
lines(dd, yy.mixture.plot, lty = 3, lwd = 2)
#Plot data CI bars
segments(x0 = abraded[,'dose'], y0 = abraded.CIs[,1], y1 = abraded.CIs[,2])
segments(x0 = abraded[,'dose']*.7, y0 = abraded.CIs[,1], x1 = abraded[,'dose']*1.3)
segments(x0 = abraded[,'dose']*.7, y0 = abraded.CIs[,2], x1 = abraded[,'dose']*1.3)
# data
points(abraded[,'dose'], abraded[,'died']/abraded[,'n'],  pch = 21, cex = 1.5, bg = ham.col)
legend('bottomright', legend = c('basic model', 'mixture model'), lty = c(1, 3), bty = 'n', lwd = 2)
text(.1, 1.15, 'C', font = 2, xpd = NA)
#Conjunctval
plot(dd, p.inf(dd, opt.pc.conjunctival.skin$minimum), ylab = 'Probability of Infection', xlab = 'Dose', type = 'l',  lwd = 2, ylim = c(0,1), log = 'x',  cex.lab = 1.1, xlim = c(1, 1e8))
#Plot CI bars
segments(x0 = conjunctival[,'dose'], y0 = conjunctival.CIs[,1], y1 = conjunctival.CIs[,2])
segments(x0 = conjunctival[,'dose']*.7, y0 = conjunctival.CIs[,1], x1 = conjunctival[,'dose']*1.3)
segments(x0 = conjunctival[,'dose']*.7, y0 = conjunctival.CIs[,2], x1 = conjunctival[,'dose']*1.3)
# data
points(conjunctival[,'dose'], conjunctival[,'died']/conjunctival[,'n'], pch = 21, cex = 1.5, bg = ham.col)
text(.1, 1.15, 'D', font = 2, xpd = NA)
#Abraded, rats
plot(dd, p.inf(dd, best.pc = opt.pc.abraded.rat.skin$minimum, best.pp = pP), ylab = 'Probability of Infection', xlab = 'Dose', type = 'l', lwd = 2, ylim = c(0,1), log = 'x', cex.lab = 1.1, xlim = c(1, 1e8), col = 'gray55')
# Mixture model fits
yy.mixture.plot.rat = p.inf.mixture(dd.in = dd, aa.in = opt.aa.BB.abraded.rat.skin$par['aa'], bb.in = opt.aa.BB.abraded.rat.skin$par['bb'], pp.in =pP.rat, sp = 'rats')
lines(dd, yy.mixture.plot.rat, lty = 3, lwd = 2, col = 'gray55')
#Plot data CI bars
segments(x0 = abraded.rat[,'dose'], y0 = rat.CIs[,1], y1 = rat.CIs[,2], col = 'gray55')
segments(x0 = abraded.rat[,'dose']*.7, y0 = rat.CIs[,1], x1 = abraded.rat[,'dose']*1.3, col = 'gray55')
segments(x0 = abraded.rat[,'dose']*.7, y0 = rat.CIs[,2], x1 = abraded.rat[,'dose']*1.3, col = 'gray55')
# Data
points(abraded.rat[,'dose'], abraded.rat[,'died']/abraded.rat[,'n'],  pch = 22, cex = 1.5, bg = rat.col, col = 'gray')
legend('bottomright', legend = c('basic model', 'mixture model'), lty = c(1, 3), bty = 'n', lwd = c(1,2), col = 'gray55')
text(.1, 1.15, 'E', font = 2, xpd = NA)
#IP, hamsters
plot(dd, p.inf.IP(dose = dd, best.pp = pP), ylab = 'Probability of Infection', xlab = 'Dose', type = 'l', ylim = c(0,1), log = 'x', cex.lab = 1.1, xlim = c(1, 1e8), lwd = 2)
segments(x0 = IP[,'dose'], y0 = IP.CIs[,1], y1 = IP.CIs[,2], lwd = 1)
segments(x0 = IP[,'dose']*.7, y0 = IP.CIs[,1], x1 = IP[,'dose']*1.3, lwd = 1)
segments(x0 = IP[,'dose']*.7, y0 = IP.CIs[,2], x1 = IP[,'dose']*1.3, lwd = 1)
points(IP[,'dose'], IP[,'died']/IP[,'n'],  pch = 21, cex = 1.7, bg = ham.col)
lines(dd, p.inf.IP(dd, pP.rat), lty = 1, lwd = 1.3, col = 'gray55')
xx.jitter = 10^(log10(IP.rat[,'dose'])+.1) # Jitter rat CIs so you can see CIs from both species
segments(x0 = xx.jitter, y0 = IP.CIs.rat[,1], y1 = IP.CIs.rat[,2], col = 'gray50', lwd = .7)
segments(x0 = IP.rat[,'dose'], y0 = IP.CIs.rat[,1], x1 = IP.rat[,'dose']*1.5, col = 'gray50', lwd = .7)
segments(x0 = IP.rat[,'dose'], y0 = IP.CIs.rat[,2], x1 = IP.rat[,'dose']*1.5, col = 'gray50', lwd = .7)
points(xx.jitter, IP.rat[,'died']/IP.rat[,'n'],  pch = 22, cex = 1.2, bg = rat.col, col = 'gray')
legend('bottomright', legend = c('hamsters', 'rats'), lty = 1, bty = 'n', lwd = c(2,2), pch = c(21, 22), pt.bg = c(ham.col, rat.col), col = c('black', 'gray50'))
text(.1, 1.15, 'F', font = 2, xpd = NA)
dev.off()
}
{
pdf(fig4, height = 7)
# Define a function to make transparent colors
tns.col = function(col.in, tns.pct){
rgbvals = col2rgb(col.in)
tnscol = rgb(rgbvals[1], rgbvals[2], rgbvals[3], tns.pct/100*255,maxColorValue = 255)
tnscol
}
par(mfrow = c(2,1), mgp = c(2,1,0), mar = c(3,3,3,3))
dd = c(1:8, 10^seq(1.7, 11, by = .15))
p.inf.i =  p.inf(dd, opt.pc.intact.skin$minimum); p.inf.i[which(!is.finite(p.inf.i))] = 1
plot(dd, p.inf.i, ylab = 'P(Infection), hamsters', xlab = 'Dose', type = 'l', col = cols[1], ylim = c(0,1.3), log = 'x', cex.lab = 1.1, lwd = 3, bty= 'n', yaxt = 'n', xaxt = 'n', lty = 3)
axis(1, at = 10^(1:9), labels = 10^(1:9))
lower = p.inf(dd, CI.intact[1]); lower[which(!is.finite(lower))] = 1
upper = p.inf(dd, CI.intact[2]); upper[which(!is.finite(upper))] = 1
polygon(x = c(dd, rev(dd)), y = c(lower, rev(upper)), border = NA, col = col2alpha(cols[1], .5))
axis(side = 2, at = seq(0, 1, by = .1))
## Initialize storage and calculate bounds -- doses at which infection becomes possible, or certain
bounds = matrix(NA, nrow = 2, ncol = 5, dimnames = list(c('min', 'always'), c('intact', 'shaved', 'conj', 'abraded', 'IP')))
bounds[,1] = dd[c(max(which(p.inf.i < 0.1)), min(which(p.inf.i > 0.975)))]
#Shaved
p.inf.s =  p.inf(dd, opt.pc.shaved.skin$minimum); p.inf.s[which(!is.finite(p.inf.s))] = 1
lines(dd, p.inf.s, col = cols[2], lwd = 3, lty = 3)
lower =  p.inf(dd, CI.shaved[1], best.pp = pP); lower[which(!is.finite(lower))] = 1
upper =  p.inf(dd, CI.shaved[2], best.pp = pP); upper[which(!is.finite(upper))] = 1
polygon(x = c(dd, rev(dd)), y = c(lower, rev(upper)), border = NA, col = col2alpha(cols[2], .5))
bounds[,2] = dd[c(max(which(p.inf.s < 0.1)), min(which(p.inf.s > 0.975)))]
#Abraded
yy.mixture.plot = p.inf.mixture(dd.in = dd, pp.in = pP, aa.in = opt.aa.BB.abraded.skin$par[1], bb.in = opt.aa.BB.abraded.skin$par[2])
lines(dd, yy.mixture.plot, col = cols[3], lty = 4, lwd = 3)
############ Mixture model CIs for plotting ###############
# In the mixture model, the confidence envelope is defined by a vague elliptical curve of (alpha, beta) pairs
#  Pairs on this curve have likelihoods near the threshold of the best nll + a threshold determined by the likelihood ratio method
#  Above, we defined prof.acc as the set of all (alpha, beta) pairs whose neg log lilelihoods were under the threshold value
#  Here, we'll downsample those values to extract pairs whose likelihood is very close to the threshold
#  Randomly sample points on or near this curve from the 2D profile
#  Sample 50 points per unit on the BB axis
#  Only sample points whose likelihoods are close to the threshold. THese should give the worst acceptable fits.
aa.coords.reduced = bb.coords.reduced = prof.vals.reduced = NULL
threshold = LR.Threshold(opt.aa.BB.abraded.skin$value,  2)
envelope = NULL
for(ii in 1:8){
## The first condition verifies points near the threshold
## The second condition verifies that we're sampling relatively evenly from across the full range of beta values
valid = which(prof.acc$prof>threshold-.01 & prof.acc$bb > (-1+ii) & prof.acc$bb<= (0+ii))
smp = sample(x = valid, size = min(25, length(valid)), replace = FALSE)
envelope = rbind(envelope, prof.acc[smp, ])
}
# plot(envelope$aa, envelope$bb) ## The reduced set of points fall on the boundary of the confidence envelope
# ## Now, calculate model-predicted probabilities of infection for each dose, using each pair of (alpha, beta) values in the envelope
wrapper = function(AA, BB){
tryCatch({
out = p.inf.mixture(dd.in = dd, pp.in = pP, aa.in =AA, bb.in = BB) },
error = function(e){
print(e)
out = rep(NA, 71)
},
warning = function(w){
print(w)
},
finally = function() {return(out)}
)
}
yy.CIs = mapply(FUN = wrapper, AA = envelope$aa, BB = envelope$bb)
#### Define CI envelope for plotting as the highest and lowest y value resulting from estimates using all sampled points from the CI envelope
yy.low = apply(X = yy.CIs, MARGIN = 1, FUN = min) # Estimates correspond to doses in dd
yy.high = apply(X = yy.CIs, MARGIN = 1, FUN = max)
polygon(x = c(dd, rev(dd)),
y = c(yy.low, rev(yy.high)),
col = tns.col(cols[3], 20), border = NA)
bounds[,4] = dd[c(1, min(which(yy.mixture.plot > 0.975)))]; #c(dd[min(1, which.max(yy.high <0.1))], 1e11)
#Conjunctval
p.inf.c =  p.inf(dd, opt.pc.conjunctival.skin$minimum); p.inf.c[which(!is.finite(p.inf.c))] = 1
lines(dd, p.inf.c, col = cols[4], lwd = 3)
lower =  p.inf(dd, CI.conjunctival[1]); lower[which(!is.finite(lower))] = 1
upper =  p.inf(dd, CI.conjunctival[2]); upper[which(!is.finite(upper))] = 1
polygon(x = c(dd, rev(dd)), y = c(lower, rev(upper)), border = NA, col = col2alpha(cols[4], .5))
bounds[,3] = dd[c(max(which(p.inf.c < 0.1)), min(which(p.inf.c > 0.975)))]
## IP inoculation
dd = c(1:9, 10^seq(.95, 11, by = .15))
p.IP =  p.inf.IP(dose = dd, best.pp = pP); p.IP[which(!is.finite(p.IP))] = 1
lines(dd, p.IP, lwd = 3)
lower =  p.inf.IP(dose = dd, best.pp = CI.pP[1])
upper =  p.inf.IP(dose = dd, best.pp = CI.pP[2])
polygon(x = c(dd, rev(dd)), y = c(lower, rev(upper)), border = NA, col = col2alpha('black', .5))
bounds[,5] = dd[c(1, min(which(p.IP > 0.975)))]
#cols = c('firebrick1', 'deepskyblue', 'chocolate1', 'limegreen', 'darkgreen')
ys = seq(1.03, 1.27, length = 5)+.05
segments(x0 = bounds[1,], x1 = bounds[2,], y0 = ys, col = c(cols[c(1,2,4,3)], 'black'), lty = 2, lwd = 2)
arrows(x0 = bounds[2,], x1 = 1e11, y0 = ys, col = c(cols[c(1,2,4,3)], 'black'), lty = 1, length = .1, lwd = 2)
segments(x0 = bounds[1,], y0 = ys, y1 = ys+.02, col = c(cols[c(1,2,4,3)], 'black'), lwd =2)
segments(x0 = bounds[2,], y0 = ys, y1 = ys+.02, col = c(cols[c(1,2,4,3)], 'black'), lwd = 2)
legend(4e9, y = .6, (c('intact', 'shaved', 'conjunctival', 'abraded', 'IP, no barrier')), col = rev(c('black', cols[c(3,4,2,1)])), fill = rev(c('black', cols[c(3,4,2,1)])), cex = .8, border = NA, lty = rev(c(1, 4, 1, 2, 3)), xpd = NA, lwd = rev(c(1,1,2,2,2,2)), bty = 'n')
legend(1e3, y = 1.67, c('infection possible at this dose', 'infection almost certain at this dose'), lty = c(2, 1), cex = .8, xpd = NA, bty = 'n')
text(.1, 1.3, 'A', font = 2, xpd = NA)
#### Repeat for rats
p.inf.a =  p.inf(dd, opt.pc.abraded.rat.skin$minimum, best.pp = pP.rat); p.inf.a[which(!is.finite(p.inf.a))] = 1
plot(dd, p.inf.a, ylab = 'P(Infection), rats', xlab = 'Dose', type = 'l', col = cols[3], ylim = c(0,1.3), log = 'x', cex.lab = 1.1, lwd = 3, bty= 'n', yaxt = 'n', xaxt = 'n', lty = 4)
axis(1, at = 10^(1:9), labels = 10^(1:9))
lower = p.inf(dd, CI.abraded.rat[1]); lower[which(!is.finite(lower))] = 1
upper = p.inf(dd, CI.abraded.rat[2]); upper[which(!is.finite(upper))] = 1
polygon(x = c(dd, rev(dd)), y = c(lower, rev(upper)), border = NA, col = col2alpha(cols[3], .2))
axis(side = 2, at = seq(0, 1, by = .1))
## Initialize storage and calculate bounds -- doses at which infection becomes possible, or certain
bounds = matrix(NA, nrow = 2, ncol = 2, dimnames = list(c('min', 'always'), c('abraded', 'IP')))
bounds[,1] = dd[c(max(which(p.inf.a < 0.1)), min(which(p.inf.a > 0.975)))]
## IP inoculation
lines(dd, p.IP, lwd = 3)
lower =  p.inf.IP(dose = dd, best.pp = CI.pP.rat[1])
upper =  p.inf.IP(dose = dd, best.pp = CI.pP.rat[2])
polygon(x = c(dd, rev(dd)), y = c(lower, rev(upper)), border = NA, col = col2alpha('black', .5))
bounds[,2] = dd[c(1, min(which(p.IP > 0.975)))]
#cols = c('firebrick1', 'deepskyblue', 'chocolate1', 'limegreen', 'darkgreen')
ys = seq(1.05, 1.25, length = 4)+.05
ys = ys[1:2]
segments(x0 = bounds[1,], x1 = bounds[2,], y0 = ys, col = c(cols[3], 'black'), lty = 2, xpd = NA, lwd = 2)
arrows(x0 = bounds[2,], x1 = 1e11, y0 = ys, col = c(cols[3], 'black'), lty = 1, length = .1, xpd = NA, lwd = 2)
segments(x0 = bounds[1,], y0 = ys, y1 = ys+.02, col = c(cols[3], 'black'),xpd = NA, lwd = 2)
segments(x0 = bounds[2,], y0 = ys, y1 = ys+.02, col = c(cols[3], 'black'),xpd = NA, lwd = 2)
legend(4e9, y = .6, (c('abraded', 'IP, no barrier')), col = rev(c('black', cols[3])), fill = rev(c('black', cols[3])), cex = .8, border = NA, lty = (c(4,1)), xpd = NA, lwd = rev(c(1,3)), bty = 'n')
legend(1e3, y = 1.5, c('infection possible at this dose', 'infection almost certain at this dose'), lty = c(2, 1), cex = .8, xpd = NA, bty = 'n')
text(.1, 1.3, 'B', font = 2, xpd = NA)
dev.off()
}
### Write a table template for experimental results
ham.data = rbind(intact, shaved, abraded, conjunctival, IP)
rat.data = rbind(abraded.rat, IP.rat)
## Write output files
write.csv(ham.data, file = hamdat_summary, row.names = FALSE)
write.csv(rat.data, file = ratdat_summary, row.names = FALSE)
xx = opt.aa.BB.abraded.rat.skin$par
xx[1]/sum(xx)
opt.pc.abraded.rat.skin
## This script checks numerically that the probability of infection in the basic model can be written as: P(Infection|Dose) = 1-exp(D0*p_p*p_c)
## Long-form equation:
## Let d represent the expected inoculum dose
## Let D0 represent the actual inoculum size
## Let Dw represent the reaches the within-host environment
## Let DI represent the infecting dose
## P(DI|d) = P(D0|d)P(Dw|D0)P(DI|Dw) ## The probability of a given infectious dose, given the expected inoculum size
##    P(Infection|d) = sum_DI=1:Inf sum_Dw=DI:Inf sum_D0=Dw:Inf P(D0|d)P(Dw|D0)P(DI|Dw)) ## Long form probability of infection, , given the expected inoculum size
## Calculate the summand after algebraic rearrangement into three different poisson densities
compare = function(d, D0, Dw, DI, pp, pc){
## This is the long-form equation for P(DI|d), as given in equation 4 of the main text methods
original = dpois(x = D0, lambda = d)*dbinom(x = Dw, size = D0, prob = pc)*dbinom(x = DI, size = Dw, prob = pp)
## This is an alternate representation of the summand, as shown in equation 5 of the main text methods
rearranged = dpois(x = DI, lambda = d*pc*pp)*dpois(x = D0-Dw, lambda = d*(1-pc))*dpois(x = Dw-DI, lambda = d*pc*(1-pp))
return(c(original, rearranged))
}
## Test the comparison function, which will return the value of the summand using the original long-form, and the algebraic rearrangement given in equation 5
compare(1000, 998, 100, 20, .15, .001)
## Test for 1000 randomly chosen values of d, D0, Dw, DI, pp and pc
d.test = runif(n = 1000, 1, 10^9)
D0.test = sapply(d.test, function(dd) rpois(n = 1, dd))
Dw.test = sapply(D0.test, function(D0) runif(1, 1, D0))
DI.test = sapply(Dw.test, function(Dw) runif(1, 1, Dw))
pp = runif(1000, 0, 1)
pc = runif(1000, 0, 1)
## Output comparison
test.outputs = mapply(FUN = compare, d= d.test, D0 = D0.test, Dw = Dw.test, DI = DI.test, pp = pp.test, pc = pc.test)
## This script checks numerically that the probability of infection in the basic model can be written as: P(Infection|Dose) = 1-exp(D0*p_p*p_c)
## Long-form equation:
## Let d represent the expected inoculum dose
## Let D0 represent the actual inoculum size
## Let Dw represent the reaches the within-host environment
## Let DI represent the infecting dose
## P(DI|d) = P(D0|d)P(Dw|D0)P(DI|Dw) ## The probability of a given infectious dose, given the expected inoculum size
##    P(Infection|d) = sum_DI=1:Inf sum_Dw=DI:Inf sum_D0=Dw:Inf P(D0|d)P(Dw|D0)P(DI|Dw)) ## Long form probability of infection, , given the expected inoculum size
## Calculate the summand after algebraic rearrangement into three different poisson densities
compare = function(d, D0, Dw, DI, pp, pc){
## This is the long-form equation for P(DI|d), as given in equation 4 of the main text methods
original = dpois(x = D0, lambda = d)*dbinom(x = Dw, size = D0, prob = pc)*dbinom(x = DI, size = Dw, prob = pp)
## This is an alternate representation of the summand, as shown in equation 5 of the main text methods
rearranged = dpois(x = DI, lambda = d*pc*pp)*dpois(x = D0-Dw, lambda = d*(1-pc))*dpois(x = Dw-DI, lambda = d*pc*(1-pp))
return(c(original, rearranged))
}
## Test the comparison function, which will return the value of the summand using the original long-form, and the algebraic rearrangement given in equation 5
compare(1000, 998, 100, 20, .15, .001)
## Test for 1000 randomly chosen values of d, D0, Dw, DI, pp and pc
d.test = runif(n = 1000, 1, 10^9)
D0.test = sapply(d.test, function(dd) rpois(n = 1, dd))
Dw.test = sapply(D0.test, function(D0) runif(1, 1, D0))
DI.test = sapply(Dw.test, function(Dw) runif(1, 1, Dw))
pp.test = runif(1000, 0, 1)
pc.test = runif(1000, 0, 1)
## Output comparison
test.outputs = mapply(FUN = compare, d= d.test, D0 = D0.test, Dw = Dw.test, DI = DI.test, pp = pp.test, pc = pc.test)
warnings()
## This script checks numerically that the probability of infection in the basic model can be written as: P(Infection|Dose) = 1-exp(D0*p_p*p_c)
## Long-form equation:
## Let d represent the expected inoculum dose
## Let D0 represent the actual inoculum size
## Let Dw represent the reaches the within-host environment
## Let DI represent the infecting dose
## P(DI|d) = P(D0|d)P(Dw|D0)P(DI|Dw) ## The probability of a given infectious dose, given the expected inoculum size
##    P(Infection|d) = sum_DI=1:Inf sum_Dw=DI:Inf sum_D0=Dw:Inf P(D0|d)P(Dw|D0)P(DI|Dw)) ## Long form probability of infection, , given the expected inoculum size
## Calculate the summand after algebraic rearrangement into three different poisson densities
compare = function(d, D0, Dw, DI, pp, pc){
## This is the long-form equation for P(DI|d), as given in equation 4 of the main text methods
original = dpois(x = D0, lambda = d)*dbinom(x = Dw, size = D0, prob = pc)*dbinom(x = DI, size = Dw, prob = pp)
## This is an alternate representation of the summand, as shown in equation 5 of the main text methods
rearranged = dpois(x = DI, lambda = d*pc*pp)*dpois(x = D0-Dw, lambda = d*(1-pc))*dpois(x = Dw-DI, lambda = d*pc*(1-pp))
return(c(original, rearranged))
}
## Test the comparison function, which will return the value of the summand using the original long-form, and the algebraic rearrangement given in equation 5
compare(1000, 998, 100, 20, .15, .001)
## Test for 1000 randomly chosen values of d, D0, Dw, DI, pp and pc
d.test = round(runif(n = 1000, 1, 10^9))
D0.test = sapply(d.test, function(dd) rpois(n = 1, dd))
Dw.test = sapply(D0.test, function(D0) runif(1, 1, D0))
DI.test = sapply(Dw.test, function(Dw) runif(1, 1, Dw))
pp.test = runif(1000, 0, 1)
pc.test = runif(1000, 0, 1)
## Output comparison
test.outputs = mapply(FUN = compare, d= d.test, D0 = D0.test, Dw = Dw.test, DI = DI.test, pp = pp.test, pc = pc.test)
warnings()
d.test
D0.test
Dw.test
D0.test
## This script checks numerically that the probability of infection in the basic model can be written as: P(Infection|Dose) = 1-exp(D0*p_p*p_c)
## Long-form equation:
## Let d represent the expected inoculum dose
## Let D0 represent the actual inoculum size
## Let Dw represent the reaches the within-host environment
## Let DI represent the infecting dose
## P(DI|d) = P(D0|d)P(Dw|D0)P(DI|Dw) ## The probability of a given infectious dose, given the expected inoculum size
##    P(Infection|d) = sum_DI=1:Inf sum_Dw=DI:Inf sum_D0=Dw:Inf P(D0|d)P(Dw|D0)P(DI|Dw)) ## Long form probability of infection, , given the expected inoculum size
## Calculate the summand after algebraic rearrangement into three different poisson densities
compare = function(d, D0, Dw, DI, pp, pc){
## This is the long-form equation for P(DI|d), as given in equation 4 of the main text methods
original = dpois(x = D0, lambda = d)*dbinom(x = Dw, size = D0, prob = pc)*dbinom(x = DI, size = Dw, prob = pp)
## This is an alternate representation of the summand, as shown in equation 5 of the main text methods
rearranged = dpois(x = DI, lambda = d*pc*pp)*dpois(x = D0-Dw, lambda = d*(1-pc))*dpois(x = Dw-DI, lambda = d*pc*(1-pp))
return(c(original, rearranged))
}
## Test the comparison function, which will return the value of the summand using the original long-form, and the algebraic rearrangement given in equation 5
compare(1000, 998, 100, 20, .15, .001)
## Test for 1000 randomly chosen values of d, D0, Dw, DI, pp and pc
d.test = round(runif(n = 1000, 1, 10^9))
D0.test = sapply(d.test, function(dd) rpois(n = 1, dd))
Dw.test = round(sapply(D0.test, function(D0) runif(1, 1, D0)))
DI.test = round(sapply(Dw.test, function(Dw) runif(1, 1, Dw)))
pp.test = runif(1000, 0, 1)
pc.test = runif(1000, 0, 1)
## Output comparison
test.outputs = mapply(FUN = compare, d= d.test, D0 = D0.test, Dw = Dw.test, DI = DI.test, pp = pp.test, pc = pc.test)
test.outputs
test.outputs[1,]-test.outputs[2,]
## This script checks numerically that the probability of infection in the basic model can be written as: P(Infection|Dose) = 1-exp(D0*p_p*p_c)
## Long-form equation:
## Let d represent the expected inoculum dose
## Let D0 represent the actual inoculum size
## Let Dw represent the reaches the within-host environment
## Let DI represent the infecting dose
## P(DI|d) = P(D0|d)P(Dw|D0)P(DI|Dw) ## The probability of a given infectious dose, given the expected inoculum size
##    P(Infection|d) = sum_DI=1:Inf sum_Dw=DI:Inf sum_D0=Dw:Inf P(D0|d)P(Dw|D0)P(DI|Dw)) ## Long form probability of infection, , given the expected inoculum size
## Calculate the summand after algebraic rearrangement into three different poisson densities
compare = function(d, D0, Dw, DI, pp, pc){
## This is the long-form equation for P(DI|d), as given in equation 4 of the main text methods
original = dpois(x = D0, lambda = d)*dbinom(x = Dw, size = D0, prob = pc)*dbinom(x = DI, size = Dw, prob = pp)
## This is an alternate representation of the summand, as shown in equation 5 of the main text methods
rearranged = dpois(x = DI, lambda = d*pc*pp)*dpois(x = D0-Dw, lambda = d*(1-pc))*dpois(x = Dw-DI, lambda = d*pc*(1-pp))
return(c(original, rearranged))
}
## Test the comparison function, which will return the value of the summand using the original long-form, and the algebraic rearrangement given in equation 5
compare(1000, 998, 100, 20, .15, .001)
## Test for 1000 randomly chosen values of d, D0, Dw, DI, pp and pc
d.test = round(runif(n = 1000, 1, 10^9))
D0.test = sapply(d.test, function(dd) rpois(n = 1, dd))
Dw.test = round(sapply(D0.test, function(D0) runif(1, 1, D0)))
DI.test = round(sapply(Dw.test, function(Dw) runif(1, 1, Dw)))
pp.test = runif(1000, 0, 1)
pc.test = runif(1000, 0, 1)
## Output comparison
test.outputs = mapply(FUN = compare, d= d.test, D0 = D0.test, Dw = Dw.test, DI = DI.test, pp = pp.test, pc = pc.test)
## Verify that both versions of the summand give exactly the same answer
test[1,]-test[2,]
## Q.E.D.
## This script checks numerically that the probability of infection in the basic model can be written as: P(Infection|Dose) = 1-exp(D0*p_p*p_c)
## Long-form equation:
## Let d represent the expected inoculum dose
## Let D0 represent the actual inoculum size
## Let Dw represent the reaches the within-host environment
## Let DI represent the infecting dose
## P(DI|d) = P(D0|d)P(Dw|D0)P(DI|Dw) ## The probability of a given infectious dose, given the expected inoculum size
##    P(Infection|d) = sum_DI=1:Inf sum_Dw=DI:Inf sum_D0=Dw:Inf P(D0|d)P(Dw|D0)P(DI|Dw)) ## Long form probability of infection, , given the expected inoculum size
## Calculate the summand after algebraic rearrangement into three different poisson densities
compare = function(d, D0, Dw, DI, pp, pc){
## This is the long-form equation for P(DI|d), as given in equation 4 of the main text methods
original = dpois(x = D0, lambda = d)*dbinom(x = Dw, size = D0, prob = pc)*dbinom(x = DI, size = Dw, prob = pp)
## This is an alternate representation of the summand, as shown in equation 5 of the main text methods
rearranged = dpois(x = DI, lambda = d*pc*pp)*dpois(x = D0-Dw, lambda = d*(1-pc))*dpois(x = Dw-DI, lambda = d*pc*(1-pp))
return(c(original, rearranged))
}
## Test the comparison function, which will return the value of the summand using the original long-form, and the algebraic rearrangement given in equation 5
compare(1000, 998, 100, 20, .15, .001)
## Test for 1000 randomly chosen values of d, D0, Dw, DI, pp and pc
d.test = round(runif(n = 1000, 1, 10^9))
D0.test = sapply(d.test, function(dd) rpois(n = 1, dd))
Dw.test = round(sapply(D0.test, function(D0) runif(1, 1, D0)))
DI.test = round(sapply(Dw.test, function(Dw) runif(1, 1, Dw)))
pp.test = runif(1000, 0, 1)
pc.test = runif(1000, 0, 1)
## Output comparison
test.outputs = mapply(FUN = compare, d= d.test, D0 = D0.test, Dw = Dw.test, DI = DI.test, pp = pp.test, pc = pc.test)
## Verify that both versions of the summand give exactly the same answer
test.outputs[1,]-test.outputs[2,]
## Q.E.D.
